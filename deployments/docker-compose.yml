version: '3.8'

services:
  # Kafka в режиме KRaft (без Zookeeper)
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: telegram-news-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # KRaft режим
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9094
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Listeners
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:9093,CONTROLLER://kafka:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # Настройки кластера
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

      # Директория для логов
      KAFKA_LOG_DIRS: /var/lib/kafka/data

      # Cluster ID (должен быть уникальным для каждого кластера)
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - telegram-news-network
    volumes:
      - kafka-data:/var/lib/kafka/data
    command: >
      bash -c "
      # Форматирование хранилища для KRaft (только при первом запуске)
      if [ ! -f /var/lib/kafka/data/meta.properties ]; then
        /usr/bin/kafka-storage format -t $${CLUSTER_ID} -c /etc/kafka/kraft/server.properties;
      fi;
      # Запуск Kafka
      /etc/confluent/docker/run
      "

  # PostgreSQL для Subscription Service
  postgres-subscriptions:
    image: postgres:15-alpine
    container_name: telegram-news-postgres-subscriptions
    environment:
      POSTGRES_DB: subscriptions_db
      POSTGRES_USER: subscriptions_user
      POSTGRES_PASSWORD: subscriptions_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - telegram-news-network
    volumes:
      - postgres-subscriptions-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U subscriptions_user -d subscriptions_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL для News Service
  postgres-news:
    image: postgres:15-alpine
    container_name: telegram-news-postgres-news
    environment:
      POSTGRES_DB: news_db
      POSTGRES_USER: news_user
      POSTGRES_PASSWORD: news_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    networks:
      - telegram-news-network
    volumes:
      - postgres-news-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U news_user -d news_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI (опционально, для удобства разработки)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: telegram-news-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: telegram-news-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      # Zookeeper не требуется в KRaft режиме
    networks:
      - telegram-news-network

networks:
  telegram-news-network:
    driver: bridge

volumes:
  kafka-data:
  postgres-subscriptions-data:
  postgres-news-data:
